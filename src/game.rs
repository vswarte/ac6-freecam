// CAUTION: has arxan obfuscation and it rotates per update...
//
// 01001000 10001011 11000100
// 01010101
// 01010011
// 01010110
// 01010111
// 01000000 01010100
// 01000000 01010101
// 01000000 01010110
// 01000000 01010111
// 01001000 10001101 01101000 10100001
// 01001000 10000001 11101100 10111000 00000000 00000000 00000000
// 01001000 11000111 01000101 10000111 11111110 11111111 11111111 11111111
// 00001111 00101001 01110000 10101000
// 00001111 00101001 01111000 10011000
// 01000000 00001111 00101001 01000000 10001000
// 01000000 00001111 00101001 01001100 00100100 01110000
// 01000000 00001111 00101001 01010100 00100100 01100000
// 01000000 00001111 00101001 01011100 00100100 01010000
// 01000000 00001111 00101001 01100100 00100100 01000000
pub const POINTER_FLIPPER_UPDATE: usize     = 0x14175a7b0;

// Also findable by the stepper string u"CSScaleformStep::STEP_UpdateB"
//
// 01001000 10001001 01011100 00100100 00001000
// 01010111
// 01001000 10000011 11101100 00110000
// 01001000 10001011 00000101 00000000 00000000 00000000 00000000
// 00110011 11000000
// 10001001 01000100 00100100 00100000
// 01001000 10001011 11111010
// 01001000 10001011 11011001
// 01001000 10000101 11000000
// 00001111 10000101 00000000 00000000 00000000 00000000
// 01001000 00111001 00000101 00000000 00000000 00000000 00000000
// 00001111 10000101 00000000 00000000 00000000 00000000
pub const POINTER_SCALEFORM_UPDATE_B: usize = 0x1415f2cb0;

// Incredibly obfuscated, cannot get a clean AOB without extensive control flow
// pattern matching.
// Can be found by the string u"Game.IsEnableDebugCamera"
pub const POINTER_FREECAM_DEBUG_FLAG: usize = 0x145c8fd30;

// AOB is a null check of the base.
//
// 01001000 10001011 11011001
// 01001000 10001011 00111101 00000000 00000000 00000000 00000000
// 01001000 10000101 11111111
// 01110100 00000000
// 01001000 10001101 01010100 00100100 00110000
// 01001000 10001011 11001111
// 11101000 00000000 00000000 00000000 00000000
// 01001000 10001011 01001111 00011000
// 01001000 10001101 01000100 00100100 00110000
// 01001000 10001101 01010100 00100100 00111000
// 11101000 00000000 00000000 00000000 00000000
pub const POINTER_SOME_RANDOM_BASE: usize   = 0x144e157e8;

// TODO: this can be reworked to hook the vmt directly since it's all a single
// vftable.
// Constructor for the vftable is the first call in the AOB match.
//
// 01001000 10001101 01000101 11100000
// 01001000 10001011 11010000
// 01001000 10001101 01001101 10000000
// 11101000 00000000 00000000 00000000 00000000
// 10010000
// 01001000 10001001 01100101 11100000
// 01001000 10001001 01111101 11100000
// 01001000 10001101 01010101 10000000
// 01001000 10001101 01001011 00100000
// 11101000 00000000 00000000 00000000 00000000
pub const POINTER_CAMERA_SPEED_HOOK_1: usize = 0x1416f7f60;
pub const POINTER_CAMERA_SPEED_HOOK_2: usize = 0x1416f7f70;
pub const POINTER_CAMERA_SPEED_HOOK_3: usize = 0x1416f7f80;
pub const POINTER_CAMERA_SPEED_HOOK_4: usize = 0x1416f7fb0;
pub const POINTER_CAMERA_SPEED_HOOK_5: usize = 0x1416f7fc0;

pub static mut GLOBAL_TIME_MULTIPLIER: f32 = 1.0;
pub static mut CAMERA_SPEED_MULTIPLIER: f32 = 1.0;

#[repr(C)]
pub struct CSFlipperImp {
    pub unk: [u8; 0x268],
    pub delta_time: f32,
}
